#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Geo_Lab_Online.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GeoLabOnlinedb")]
	public partial class GeolabOnlineDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertLessonQuiz(LessonQuiz instance);
    partial void UpdateLessonQuiz(LessonQuiz instance);
    partial void DeleteLessonQuiz(LessonQuiz instance);
    partial void InsertLessonQuizAnswer(LessonQuizAnswer instance);
    partial void UpdateLessonQuizAnswer(LessonQuizAnswer instance);
    partial void DeleteLessonQuizAnswer(LessonQuizAnswer instance);
    partial void InsertLesson(Lesson instance);
    partial void UpdateLesson(Lesson instance);
    partial void DeleteLesson(Lesson instance);
    partial void InsertLessonsCodeType(LessonsCodeType instance);
    partial void UpdateLessonsCodeType(LessonsCodeType instance);
    partial void DeleteLessonsCodeType(LessonsCodeType instance);
    partial void InsertUserCode(UserCode instance);
    partial void UpdateUserCode(UserCode instance);
    partial void DeleteUserCode(UserCode instance);
    partial void InsertUserCurse(UserCurse instance);
    partial void UpdateUserCurse(UserCurse instance);
    partial void DeleteUserCurse(UserCurse instance);
    partial void InsertUserLesson(UserLesson instance);
    partial void UpdateUserLesson(UserLesson instance);
    partial void DeleteUserLesson(UserLesson instance);
    partial void InsertUserNote(UserNote instance);
    partial void UpdateUserNote(UserNote instance);
    partial void DeleteUserNote(UserNote instance);
    partial void InsertUserQuiz(UserQuiz instance);
    partial void UpdateUserQuiz(UserQuiz instance);
    partial void DeleteUserQuiz(UserQuiz instance);
    partial void InsertDirection(Direction instance);
    partial void UpdateDirection(Direction instance);
    partial void DeleteDirection(Direction instance);
    partial void InsertCourseSubject(CourseSubject instance);
    partial void UpdateCourseSubject(CourseSubject instance);
    partial void DeleteCourseSubject(CourseSubject instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertLecture(Lecture instance);
    partial void UpdateLecture(Lecture instance);
    partial void DeleteLecture(Lecture instance);
    #endregion
		
		public GeolabOnlineDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GeoLabOnlinedbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GeolabOnlineDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeolabOnlineDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeolabOnlineDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeolabOnlineDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<LessonQuiz> LessonQuizs
		{
			get
			{
				return this.GetTable<LessonQuiz>();
			}
		}
		
		public System.Data.Linq.Table<LessonQuizAnswer> LessonQuizAnswers
		{
			get
			{
				return this.GetTable<LessonQuizAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Lesson> Lessons
		{
			get
			{
				return this.GetTable<Lesson>();
			}
		}
		
		public System.Data.Linq.Table<LessonsCodeType> LessonsCodeTypes
		{
			get
			{
				return this.GetTable<LessonsCodeType>();
			}
		}
		
		public System.Data.Linq.Table<UserCode> UserCodes
		{
			get
			{
				return this.GetTable<UserCode>();
			}
		}
		
		public System.Data.Linq.Table<UserCurse> UserCurses
		{
			get
			{
				return this.GetTable<UserCurse>();
			}
		}
		
		public System.Data.Linq.Table<UserLesson> UserLessons
		{
			get
			{
				return this.GetTable<UserLesson>();
			}
		}
		
		public System.Data.Linq.Table<UserNote> UserNotes
		{
			get
			{
				return this.GetTable<UserNote>();
			}
		}
		
		public System.Data.Linq.Table<UserQuiz> UserQuizs
		{
			get
			{
				return this.GetTable<UserQuiz>();
			}
		}
		
		public System.Data.Linq.Table<Direction> Directions
		{
			get
			{
				return this.GetTable<Direction>();
			}
		}
		
		public System.Data.Linq.Table<CourseSubject> CourseSubjects
		{
			get
			{
				return this.GetTable<CourseSubject>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Lecture> Lectures
		{
			get
			{
				return this.GetTable<Lecture>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Status;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private EntitySet<UserCode> _UserCodes;
		
		private EntitySet<UserCurse> _UserCurses;
		
		private EntitySet<UserLesson> _UserLessons;
		
		private EntitySet<UserNote> _UserNotes;
		
		private EntitySet<UserQuiz> _UserQuizs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    #endregion
		
		public User()
		{
			this._UserCodes = new EntitySet<UserCode>(new Action<UserCode>(this.attach_UserCodes), new Action<UserCode>(this.detach_UserCodes));
			this._UserCurses = new EntitySet<UserCurse>(new Action<UserCurse>(this.attach_UserCurses), new Action<UserCurse>(this.detach_UserCurses));
			this._UserLessons = new EntitySet<UserLesson>(new Action<UserLesson>(this.attach_UserLessons), new Action<UserLesson>(this.detach_UserLessons));
			this._UserNotes = new EntitySet<UserNote>(new Action<UserNote>(this.attach_UserNotes), new Action<UserNote>(this.detach_UserNotes));
			this._UserQuizs = new EntitySet<UserQuiz>(new Action<UserQuiz>(this.attach_UserQuizs), new Action<UserQuiz>(this.detach_UserQuizs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCode", Storage="_UserCodes", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<UserCode> UserCodes
		{
			get
			{
				return this._UserCodes;
			}
			set
			{
				this._UserCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCurse", Storage="_UserCurses", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<UserCurse> UserCurses
		{
			get
			{
				return this._UserCurses;
			}
			set
			{
				this._UserCurses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLesson", Storage="_UserLessons", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<UserLesson> UserLessons
		{
			get
			{
				return this._UserLessons;
			}
			set
			{
				this._UserLessons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserNote", Storage="_UserNotes", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<UserNote> UserNotes
		{
			get
			{
				return this._UserNotes;
			}
			set
			{
				this._UserNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserQuiz", Storage="_UserQuizs", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<UserQuiz> UserQuizs
		{
			get
			{
				return this._UserQuizs;
			}
			set
			{
				this._UserQuizs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCodes(UserCode entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserCodes(UserCode entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserCurses(UserCurse entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserCurses(UserCurse entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserLessons(UserLesson entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLessons(UserLesson entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserNotes(UserNote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserNotes(UserNote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserQuizs(UserQuiz entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserQuizs(UserQuiz entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonQuiz")]
	public partial class LessonQuiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LessonId;
		
		private string _Question;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private EntitySet<LessonQuizAnswer> _LessonQuizAnswers;
		
		private EntitySet<UserQuiz> _UserQuizs;
		
		private EntityRef<Lesson> _Lesson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLessonIdChanging(int value);
    partial void OnLessonIdChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    #endregion
		
		public LessonQuiz()
		{
			this._LessonQuizAnswers = new EntitySet<LessonQuizAnswer>(new Action<LessonQuizAnswer>(this.attach_LessonQuizAnswers), new Action<LessonQuizAnswer>(this.detach_LessonQuizAnswers));
			this._UserQuizs = new EntitySet<UserQuiz>(new Action<UserQuiz>(this.attach_UserQuizs), new Action<UserQuiz>(this.detach_UserQuizs));
			this._Lesson = default(EntityRef<Lesson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonId", DbType="Int NOT NULL")]
		public int LessonId
		{
			get
			{
				return this._LessonId;
			}
			set
			{
				if ((this._LessonId != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIdChanging(value);
					this.SendPropertyChanging();
					this._LessonId = value;
					this.SendPropertyChanged("LessonId");
					this.OnLessonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonQuiz_LessonQuizAnswer", Storage="_LessonQuizAnswers", ThisKey="ID", OtherKey="QuizId")]
		public EntitySet<LessonQuizAnswer> LessonQuizAnswers
		{
			get
			{
				return this._LessonQuizAnswers;
			}
			set
			{
				this._LessonQuizAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonQuiz_UserQuiz", Storage="_UserQuizs", ThisKey="ID", OtherKey="QuizId")]
		public EntitySet<UserQuiz> UserQuizs
		{
			get
			{
				return this._UserQuizs;
			}
			set
			{
				this._UserQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_LessonQuiz", Storage="_Lesson", ThisKey="LessonId", OtherKey="ID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.LessonQuizs.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.LessonQuizs.Add(this);
						this._LessonId = value.ID;
					}
					else
					{
						this._LessonId = default(int);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LessonQuizAnswers(LessonQuizAnswer entity)
		{
			this.SendPropertyChanging();
			entity.LessonQuiz = this;
		}
		
		private void detach_LessonQuizAnswers(LessonQuizAnswer entity)
		{
			this.SendPropertyChanging();
			entity.LessonQuiz = null;
		}
		
		private void attach_UserQuizs(UserQuiz entity)
		{
			this.SendPropertyChanging();
			entity.LessonQuiz = this;
		}
		
		private void detach_UserQuizs(UserQuiz entity)
		{
			this.SendPropertyChanging();
			entity.LessonQuiz = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonQuizAnswers")]
	public partial class LessonQuizAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Answer;
		
		private string _Correct;
		
		private System.Nullable<int> _QuizId;
		
		private EntitySet<UserQuiz> _UserQuizs;
		
		private EntityRef<LessonQuiz> _LessonQuiz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnCorrectChanging(string value);
    partial void OnCorrectChanged();
    partial void OnQuizIdChanging(System.Nullable<int> value);
    partial void OnQuizIdChanged();
    #endregion
		
		public LessonQuizAnswer()
		{
			this._UserQuizs = new EntitySet<UserQuiz>(new Action<UserQuiz>(this.attach_UserQuizs), new Action<UserQuiz>(this.detach_UserQuizs));
			this._LessonQuiz = default(EntityRef<LessonQuiz>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correct", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string Correct
		{
			get
			{
				return this._Correct;
			}
			set
			{
				if ((this._Correct != value))
				{
					this.OnCorrectChanging(value);
					this.SendPropertyChanging();
					this._Correct = value;
					this.SendPropertyChanged("Correct");
					this.OnCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuizId", DbType="Int")]
		public System.Nullable<int> QuizId
		{
			get
			{
				return this._QuizId;
			}
			set
			{
				if ((this._QuizId != value))
				{
					if (this._LessonQuiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuizIdChanging(value);
					this.SendPropertyChanging();
					this._QuizId = value;
					this.SendPropertyChanged("QuizId");
					this.OnQuizIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonQuizAnswer_UserQuiz", Storage="_UserQuizs", ThisKey="ID", OtherKey="AnswerID")]
		public EntitySet<UserQuiz> UserQuizs
		{
			get
			{
				return this._UserQuizs;
			}
			set
			{
				this._UserQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonQuiz_LessonQuizAnswer", Storage="_LessonQuiz", ThisKey="QuizId", OtherKey="ID", IsForeignKey=true)]
		public LessonQuiz LessonQuiz
		{
			get
			{
				return this._LessonQuiz.Entity;
			}
			set
			{
				LessonQuiz previousValue = this._LessonQuiz.Entity;
				if (((previousValue != value) 
							|| (this._LessonQuiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonQuiz.Entity = null;
						previousValue.LessonQuizAnswers.Remove(this);
					}
					this._LessonQuiz.Entity = value;
					if ((value != null))
					{
						value.LessonQuizAnswers.Add(this);
						this._QuizId = value.ID;
					}
					else
					{
						this._QuizId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LessonQuiz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserQuizs(UserQuiz entity)
		{
			this.SendPropertyChanging();
			entity.LessonQuizAnswer = this;
		}
		
		private void detach_UserQuizs(UserQuiz entity)
		{
			this.SendPropertyChanging();
			entity.LessonQuizAnswer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lessons")]
	public partial class Lesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _LessonsTitel;
		
		private string _LessonsDesc;
		
		private string _LessonsVideoLink;
		
		private int _SubjectId;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<int> _CodeType;
		
		private int _LessonsLvl;
		
		private EntitySet<LessonQuiz> _LessonQuizs;
		
		private EntitySet<UserCode> _UserCodes;
		
		private EntitySet<UserLesson> _UserLessons;
		
		private EntitySet<UserNote> _UserNotes;
		
		private EntityRef<LessonsCodeType> _LessonsCodeType;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLessonsTitelChanging(string value);
    partial void OnLessonsTitelChanged();
    partial void OnLessonsDescChanging(string value);
    partial void OnLessonsDescChanged();
    partial void OnLessonsVideoLinkChanging(string value);
    partial void OnLessonsVideoLinkChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnCodeTypeChanging(System.Nullable<int> value);
    partial void OnCodeTypeChanged();
    partial void OnLessonsLvlChanging(int value);
    partial void OnLessonsLvlChanged();
    #endregion
		
		public Lesson()
		{
			this._LessonQuizs = new EntitySet<LessonQuiz>(new Action<LessonQuiz>(this.attach_LessonQuizs), new Action<LessonQuiz>(this.detach_LessonQuizs));
			this._UserCodes = new EntitySet<UserCode>(new Action<UserCode>(this.attach_UserCodes), new Action<UserCode>(this.detach_UserCodes));
			this._UserLessons = new EntitySet<UserLesson>(new Action<UserLesson>(this.attach_UserLessons), new Action<UserLesson>(this.detach_UserLessons));
			this._UserNotes = new EntitySet<UserNote>(new Action<UserNote>(this.attach_UserNotes), new Action<UserNote>(this.detach_UserNotes));
			this._LessonsCodeType = default(EntityRef<LessonsCodeType>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonsTitel", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LessonsTitel
		{
			get
			{
				return this._LessonsTitel;
			}
			set
			{
				if ((this._LessonsTitel != value))
				{
					this.OnLessonsTitelChanging(value);
					this.SendPropertyChanging();
					this._LessonsTitel = value;
					this.SendPropertyChanged("LessonsTitel");
					this.OnLessonsTitelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonsDesc", DbType="NVarChar(MAX)")]
		public string LessonsDesc
		{
			get
			{
				return this._LessonsDesc;
			}
			set
			{
				if ((this._LessonsDesc != value))
				{
					this.OnLessonsDescChanging(value);
					this.SendPropertyChanging();
					this._LessonsDesc = value;
					this.SendPropertyChanged("LessonsDesc");
					this.OnLessonsDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonsVideoLink", DbType="VarChar(150)")]
		public string LessonsVideoLink
		{
			get
			{
				return this._LessonsVideoLink;
			}
			set
			{
				if ((this._LessonsVideoLink != value))
				{
					this.OnLessonsVideoLinkChanging(value);
					this.SendPropertyChanging();
					this._LessonsVideoLink = value;
					this.SendPropertyChanged("LessonsVideoLink");
					this.OnLessonsVideoLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL")]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeType", DbType="Int")]
		public System.Nullable<int> CodeType
		{
			get
			{
				return this._CodeType;
			}
			set
			{
				if ((this._CodeType != value))
				{
					if (this._LessonsCodeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeTypeChanging(value);
					this.SendPropertyChanging();
					this._CodeType = value;
					this.SendPropertyChanged("CodeType");
					this.OnCodeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonsLvl", DbType="Int NOT NULL")]
		public int LessonsLvl
		{
			get
			{
				return this._LessonsLvl;
			}
			set
			{
				if ((this._LessonsLvl != value))
				{
					this.OnLessonsLvlChanging(value);
					this.SendPropertyChanging();
					this._LessonsLvl = value;
					this.SendPropertyChanged("LessonsLvl");
					this.OnLessonsLvlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_LessonQuiz", Storage="_LessonQuizs", ThisKey="ID", OtherKey="LessonId")]
		public EntitySet<LessonQuiz> LessonQuizs
		{
			get
			{
				return this._LessonQuizs;
			}
			set
			{
				this._LessonQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_UserCode", Storage="_UserCodes", ThisKey="ID", OtherKey="LessonId")]
		public EntitySet<UserCode> UserCodes
		{
			get
			{
				return this._UserCodes;
			}
			set
			{
				this._UserCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_UserLesson", Storage="_UserLessons", ThisKey="ID", OtherKey="LessonsId")]
		public EntitySet<UserLesson> UserLessons
		{
			get
			{
				return this._UserLessons;
			}
			set
			{
				this._UserLessons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_UserNote", Storage="_UserNotes", ThisKey="ID", OtherKey="LessonsId")]
		public EntitySet<UserNote> UserNotes
		{
			get
			{
				return this._UserNotes;
			}
			set
			{
				this._UserNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonsCodeType_Lesson", Storage="_LessonsCodeType", ThisKey="CodeType", OtherKey="ID", IsForeignKey=true)]
		public LessonsCodeType LessonsCodeType
		{
			get
			{
				return this._LessonsCodeType.Entity;
			}
			set
			{
				LessonsCodeType previousValue = this._LessonsCodeType.Entity;
				if (((previousValue != value) 
							|| (this._LessonsCodeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonsCodeType.Entity = null;
						previousValue.Lessons.Remove(this);
					}
					this._LessonsCodeType.Entity = value;
					if ((value != null))
					{
						value.Lessons.Add(this);
						this._CodeType = value.ID;
					}
					else
					{
						this._CodeType = default(Nullable<int>);
					}
					this.SendPropertyChanged("LessonsCodeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Lesson", Storage="_Subject", ThisKey="SubjectId", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Lessons.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Lessons.Add(this);
						this._SubjectId = value.ID;
					}
					else
					{
						this._SubjectId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LessonQuizs(LessonQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_LessonQuizs(LessonQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
		
		private void attach_UserCodes(UserCode entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_UserCodes(UserCode entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
		
		private void attach_UserLessons(UserLesson entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_UserLessons(UserLesson entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
		
		private void attach_UserNotes(UserNote entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_UserNotes(UserNote entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonsCodeType")]
	public partial class LessonsCodeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Data.Linq.Binary _SourceType;
		
		private string _source;
		
		private EntitySet<Lesson> _Lessons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSourceTypeChanging(System.Data.Linq.Binary value);
    partial void OnSourceTypeChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    #endregion
		
		public LessonsCodeType()
		{
			this._Lessons = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lessons), new Action<Lesson>(this.detach_Lessons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceType", DbType="VarBinary(10)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SourceType
		{
			get
			{
				return this._SourceType;
			}
			set
			{
				if ((this._SourceType != value))
				{
					this.OnSourceTypeChanging(value);
					this.SendPropertyChanging();
					this._SourceType = value;
					this.SendPropertyChanged("SourceType");
					this.OnSourceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source", DbType="NVarChar(MAX)")]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonsCodeType_Lesson", Storage="_Lessons", ThisKey="ID", OtherKey="CodeType")]
		public EntitySet<Lesson> Lessons
		{
			get
			{
				return this._Lessons;
			}
			set
			{
				this._Lessons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.LessonsCodeType = this;
		}
		
		private void detach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.LessonsCodeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCodes")]
	public partial class UserCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _UserId;
		
		private string _Code;
		
		private int _ID;
		
		private System.Nullable<int> _LessonId;
		
		private EntityRef<Lesson> _Lesson;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLessonIdChanging(System.Nullable<int> value);
    partial void OnLessonIdChanged();
    #endregion
		
		public UserCode()
		{
			this._Lesson = default(EntityRef<Lesson>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(MAX)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonId", DbType="Int")]
		public System.Nullable<int> LessonId
		{
			get
			{
				return this._LessonId;
			}
			set
			{
				if ((this._LessonId != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIdChanging(value);
					this.SendPropertyChanging();
					this._LessonId = value;
					this.SendPropertyChanged("LessonId");
					this.OnLessonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_UserCode", Storage="_Lesson", ThisKey="LessonId", OtherKey="ID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.UserCodes.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.UserCodes.Add(this);
						this._LessonId = value.ID;
					}
					else
					{
						this._LessonId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCode", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserCodes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserCodes.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCurse")]
	public partial class UserCurse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _SubjectId;
		
		private int _ID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public UserCurse()
		{
			this._User = default(EntityRef<User>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL")]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCurse", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserCurses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserCurses.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_UserCurse", Storage="_Subject", ThisKey="SubjectId", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.UserCurses.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.UserCurses.Add(this);
						this._SubjectId = value.ID;
					}
					else
					{
						this._SubjectId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLessons")]
	public partial class UserLesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _LessonsId;
		
		private string _LessonsStatus;
		
		private int _ID;
		
		private EntityRef<Lesson> _Lesson;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLessonsIdChanging(int value);
    partial void OnLessonsIdChanged();
    partial void OnLessonsStatusChanging(string value);
    partial void OnLessonsStatusChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public UserLesson()
		{
			this._Lesson = default(EntityRef<Lesson>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonsId", DbType="Int NOT NULL")]
		public int LessonsId
		{
			get
			{
				return this._LessonsId;
			}
			set
			{
				if ((this._LessonsId != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonsIdChanging(value);
					this.SendPropertyChanging();
					this._LessonsId = value;
					this.SendPropertyChanged("LessonsId");
					this.OnLessonsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonsStatus", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string LessonsStatus
		{
			get
			{
				return this._LessonsStatus;
			}
			set
			{
				if ((this._LessonsStatus != value))
				{
					this.OnLessonsStatusChanging(value);
					this.SendPropertyChanging();
					this._LessonsStatus = value;
					this.SendPropertyChanged("LessonsStatus");
					this.OnLessonsStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_UserLesson", Storage="_Lesson", ThisKey="LessonsId", OtherKey="ID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.UserLessons.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.UserLessons.Add(this);
						this._LessonsId = value.ID;
					}
					else
					{
						this._LessonsId = default(int);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLesson", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLessons.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLessons.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserNotes")]
	public partial class UserNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LessonsId;
		
		private string _NoteText;
		
		private System.Nullable<int> _UserId;
		
		private EntityRef<Lesson> _Lesson;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLessonsIdChanging(int value);
    partial void OnLessonsIdChanged();
    partial void OnNoteTextChanging(string value);
    partial void OnNoteTextChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public UserNote()
		{
			this._Lesson = default(EntityRef<Lesson>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonsId", DbType="Int NOT NULL")]
		public int LessonsId
		{
			get
			{
				return this._LessonsId;
			}
			set
			{
				if ((this._LessonsId != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonsIdChanging(value);
					this.SendPropertyChanging();
					this._LessonsId = value;
					this.SendPropertyChanged("LessonsId");
					this.OnLessonsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteText", DbType="NVarChar(MAX)")]
		public string NoteText
		{
			get
			{
				return this._NoteText;
			}
			set
			{
				if ((this._NoteText != value))
				{
					this.OnNoteTextChanging(value);
					this.SendPropertyChanging();
					this._NoteText = value;
					this.SendPropertyChanged("NoteText");
					this.OnNoteTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_UserNote", Storage="_Lesson", ThisKey="LessonsId", OtherKey="ID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.UserNotes.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.UserNotes.Add(this);
						this._LessonsId = value.ID;
					}
					else
					{
						this._LessonsId = default(int);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserNote", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserNotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserNotes.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserQuiz")]
	public partial class UserQuiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _QuizId;
		
		private System.Nullable<int> _AnswerID;
		
		private int _ID;
		
		private EntityRef<LessonQuiz> _LessonQuiz;
		
		private EntityRef<LessonQuizAnswer> _LessonQuizAnswer;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnQuizIdChanging(int value);
    partial void OnQuizIdChanged();
    partial void OnAnswerIDChanging(System.Nullable<int> value);
    partial void OnAnswerIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public UserQuiz()
		{
			this._LessonQuiz = default(EntityRef<LessonQuiz>);
			this._LessonQuizAnswer = default(EntityRef<LessonQuizAnswer>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuizId", DbType="Int NOT NULL")]
		public int QuizId
		{
			get
			{
				return this._QuizId;
			}
			set
			{
				if ((this._QuizId != value))
				{
					if (this._LessonQuiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuizIdChanging(value);
					this.SendPropertyChanging();
					this._QuizId = value;
					this.SendPropertyChanged("QuizId");
					this.OnQuizIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerID", DbType="Int")]
		public System.Nullable<int> AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					if (this._LessonQuizAnswer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonQuiz_UserQuiz", Storage="_LessonQuiz", ThisKey="QuizId", OtherKey="ID", IsForeignKey=true)]
		public LessonQuiz LessonQuiz
		{
			get
			{
				return this._LessonQuiz.Entity;
			}
			set
			{
				LessonQuiz previousValue = this._LessonQuiz.Entity;
				if (((previousValue != value) 
							|| (this._LessonQuiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonQuiz.Entity = null;
						previousValue.UserQuizs.Remove(this);
					}
					this._LessonQuiz.Entity = value;
					if ((value != null))
					{
						value.UserQuizs.Add(this);
						this._QuizId = value.ID;
					}
					else
					{
						this._QuizId = default(int);
					}
					this.SendPropertyChanged("LessonQuiz");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonQuizAnswer_UserQuiz", Storage="_LessonQuizAnswer", ThisKey="AnswerID", OtherKey="ID", IsForeignKey=true)]
		public LessonQuizAnswer LessonQuizAnswer
		{
			get
			{
				return this._LessonQuizAnswer.Entity;
			}
			set
			{
				LessonQuizAnswer previousValue = this._LessonQuizAnswer.Entity;
				if (((previousValue != value) 
							|| (this._LessonQuizAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonQuizAnswer.Entity = null;
						previousValue.UserQuizs.Remove(this);
					}
					this._LessonQuizAnswer.Entity = value;
					if ((value != null))
					{
						value.UserQuizs.Add(this);
						this._AnswerID = value.ID;
					}
					else
					{
						this._AnswerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LessonQuizAnswer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserQuiz", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserQuizs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserQuizs.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Direction")]
	public partial class Direction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DirectionTitle;
		
		private string _DirectionDesc;
		
		private string _DirectionImage;
		
		private string _DirectionImageExt;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDirectionTitleChanging(string value);
    partial void OnDirectionTitleChanged();
    partial void OnDirectionDescChanging(string value);
    partial void OnDirectionDescChanged();
    partial void OnDirectionImageChanging(string value);
    partial void OnDirectionImageChanged();
    partial void OnDirectionImageExtChanging(string value);
    partial void OnDirectionImageExtChanged();
    #endregion
		
		public Direction()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionTitle", DbType="NVarChar(50)")]
		public string DirectionTitle
		{
			get
			{
				return this._DirectionTitle;
			}
			set
			{
				if ((this._DirectionTitle != value))
				{
					this.OnDirectionTitleChanging(value);
					this.SendPropertyChanging();
					this._DirectionTitle = value;
					this.SendPropertyChanged("DirectionTitle");
					this.OnDirectionTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionDesc", DbType="NVarChar(MAX)")]
		public string DirectionDesc
		{
			get
			{
				return this._DirectionDesc;
			}
			set
			{
				if ((this._DirectionDesc != value))
				{
					this.OnDirectionDescChanging(value);
					this.SendPropertyChanging();
					this._DirectionDesc = value;
					this.SendPropertyChanged("DirectionDesc");
					this.OnDirectionDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionImage", DbType="VarChar(150)")]
		public string DirectionImage
		{
			get
			{
				return this._DirectionImage;
			}
			set
			{
				if ((this._DirectionImage != value))
				{
					this.OnDirectionImageChanging(value);
					this.SendPropertyChanging();
					this._DirectionImage = value;
					this.SendPropertyChanged("DirectionImage");
					this.OnDirectionImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionImageExt", DbType="VarChar(10)")]
		public string DirectionImageExt
		{
			get
			{
				return this._DirectionImageExt;
			}
			set
			{
				if ((this._DirectionImageExt != value))
				{
					this.OnDirectionImageExtChanging(value);
					this.SendPropertyChanging();
					this._DirectionImageExt = value;
					this.SendPropertyChanged("DirectionImageExt");
					this.OnDirectionImageExtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Direction_Course", Storage="_Courses", ThisKey="ID", OtherKey="DirectionId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Direction = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Direction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseSubject")]
	public partial class CourseSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _courseSubjectID;
		
		private System.Nullable<int> _SubjectID;
		
		private System.Nullable<int> _CourseID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncourseSubjectIDChanging(int value);
    partial void OncourseSubjectIDChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnCourseIDChanging(System.Nullable<int> value);
    partial void OnCourseIDChanged();
    #endregion
		
		public CourseSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseSubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int courseSubjectID
		{
			get
			{
				return this._courseSubjectID;
			}
			set
			{
				if ((this._courseSubjectID != value))
				{
					this.OncourseSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._courseSubjectID = value;
					this.SendPropertyChanged("courseSubjectID");
					this.OncourseSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int")]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int")]
		public System.Nullable<int> CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_CourseSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.CourseSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.CourseSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseSubject", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseSubjects.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseSubjects.Add(this);
						this._CourseID = value.ID;
					}
					else
					{
						this._CourseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SubjectTitle;
		
		private string _SubjectDesc;
		
		private string _SubjectVideoLink;
		
		private EntitySet<Lesson> _Lessons;
		
		private EntitySet<UserCurse> _UserCurses;
		
		private EntitySet<CourseSubject> _CourseSubjects;
		
		private EntitySet<Lecture> _Lectures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectTitleChanging(string value);
    partial void OnSubjectTitleChanged();
    partial void OnSubjectDescChanging(string value);
    partial void OnSubjectDescChanged();
    partial void OnSubjectVideoLinkChanging(string value);
    partial void OnSubjectVideoLinkChanged();
    #endregion
		
		public Subject()
		{
			this._Lessons = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lessons), new Action<Lesson>(this.detach_Lessons));
			this._UserCurses = new EntitySet<UserCurse>(new Action<UserCurse>(this.attach_UserCurses), new Action<UserCurse>(this.detach_UserCurses));
			this._CourseSubjects = new EntitySet<CourseSubject>(new Action<CourseSubject>(this.attach_CourseSubjects), new Action<CourseSubject>(this.detach_CourseSubjects));
			this._Lectures = new EntitySet<Lecture>(new Action<Lecture>(this.attach_Lectures), new Action<Lecture>(this.detach_Lectures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectTitle", DbType="NVarChar(150)")]
		public string SubjectTitle
		{
			get
			{
				return this._SubjectTitle;
			}
			set
			{
				if ((this._SubjectTitle != value))
				{
					this.OnSubjectTitleChanging(value);
					this.SendPropertyChanging();
					this._SubjectTitle = value;
					this.SendPropertyChanged("SubjectTitle");
					this.OnSubjectTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectDesc", DbType="NVarChar(MAX)")]
		public string SubjectDesc
		{
			get
			{
				return this._SubjectDesc;
			}
			set
			{
				if ((this._SubjectDesc != value))
				{
					this.OnSubjectDescChanging(value);
					this.SendPropertyChanging();
					this._SubjectDesc = value;
					this.SendPropertyChanged("SubjectDesc");
					this.OnSubjectDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectVideoLink", DbType="VarChar(150)")]
		public string SubjectVideoLink
		{
			get
			{
				return this._SubjectVideoLink;
			}
			set
			{
				if ((this._SubjectVideoLink != value))
				{
					this.OnSubjectVideoLinkChanging(value);
					this.SendPropertyChanging();
					this._SubjectVideoLink = value;
					this.SendPropertyChanged("SubjectVideoLink");
					this.OnSubjectVideoLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Lesson", Storage="_Lessons", ThisKey="ID", OtherKey="SubjectId")]
		public EntitySet<Lesson> Lessons
		{
			get
			{
				return this._Lessons;
			}
			set
			{
				this._Lessons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_UserCurse", Storage="_UserCurses", ThisKey="ID", OtherKey="SubjectId")]
		public EntitySet<UserCurse> UserCurses
		{
			get
			{
				return this._UserCurses;
			}
			set
			{
				this._UserCurses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_CourseSubject", Storage="_CourseSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<CourseSubject> CourseSubjects
		{
			get
			{
				return this._CourseSubjects;
			}
			set
			{
				this._CourseSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Lecture", Storage="_Lectures", ThisKey="ID", OtherKey="UserSubject")]
		public EntitySet<Lecture> Lectures
		{
			get
			{
				return this._Lectures;
			}
			set
			{
				this._Lectures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_UserCurses(UserCurse entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_UserCurses(UserCurse entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_CourseSubjects(CourseSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_CourseSubjects(CourseSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Lectures(Lecture entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Lectures(Lecture entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CourseTitle;
		
		private string _CourseDesc;
		
		private string _CourseVideoLink;
		
		private int _DirectionId;
		
		private EntitySet<CourseSubject> _CourseSubjects;
		
		private EntityRef<Direction> _Direction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCourseTitleChanging(string value);
    partial void OnCourseTitleChanged();
    partial void OnCourseDescChanging(string value);
    partial void OnCourseDescChanged();
    partial void OnCourseVideoLinkChanging(string value);
    partial void OnCourseVideoLinkChanged();
    partial void OnDirectionIdChanging(int value);
    partial void OnDirectionIdChanged();
    #endregion
		
		public Course()
		{
			this._CourseSubjects = new EntitySet<CourseSubject>(new Action<CourseSubject>(this.attach_CourseSubjects), new Action<CourseSubject>(this.detach_CourseSubjects));
			this._Direction = default(EntityRef<Direction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTitle", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string CourseTitle
		{
			get
			{
				return this._CourseTitle;
			}
			set
			{
				if ((this._CourseTitle != value))
				{
					this.OnCourseTitleChanging(value);
					this.SendPropertyChanging();
					this._CourseTitle = value;
					this.SendPropertyChanged("CourseTitle");
					this.OnCourseTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseDesc", DbType="NVarChar(MAX)")]
		public string CourseDesc
		{
			get
			{
				return this._CourseDesc;
			}
			set
			{
				if ((this._CourseDesc != value))
				{
					this.OnCourseDescChanging(value);
					this.SendPropertyChanging();
					this._CourseDesc = value;
					this.SendPropertyChanged("CourseDesc");
					this.OnCourseDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseVideoLink", DbType="VarChar(150)")]
		public string CourseVideoLink
		{
			get
			{
				return this._CourseVideoLink;
			}
			set
			{
				if ((this._CourseVideoLink != value))
				{
					this.OnCourseVideoLinkChanging(value);
					this.SendPropertyChanging();
					this._CourseVideoLink = value;
					this.SendPropertyChanged("CourseVideoLink");
					this.OnCourseVideoLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionId", DbType="Int NOT NULL")]
		public int DirectionId
		{
			get
			{
				return this._DirectionId;
			}
			set
			{
				if ((this._DirectionId != value))
				{
					if (this._Direction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectionIdChanging(value);
					this.SendPropertyChanging();
					this._DirectionId = value;
					this.SendPropertyChanged("DirectionId");
					this.OnDirectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseSubject", Storage="_CourseSubjects", ThisKey="ID", OtherKey="CourseID")]
		public EntitySet<CourseSubject> CourseSubjects
		{
			get
			{
				return this._CourseSubjects;
			}
			set
			{
				this._CourseSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Direction_Course", Storage="_Direction", ThisKey="DirectionId", OtherKey="ID", IsForeignKey=true)]
		public Direction Direction
		{
			get
			{
				return this._Direction.Entity;
			}
			set
			{
				Direction previousValue = this._Direction.Entity;
				if (((previousValue != value) 
							|| (this._Direction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Direction.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Direction.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._DirectionId = value.ID;
					}
					else
					{
						this._DirectionId = default(int);
					}
					this.SendPropertyChanged("Direction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseSubjects(CourseSubject entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseSubjects(CourseSubject entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecture")]
	public partial class Lecture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _UserBio;
		
		private string _UserMail;
		
		private string _UserPhoto;
		
		private System.Nullable<int> _UserSubject;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnUserBioChanging(string value);
    partial void OnUserBioChanged();
    partial void OnUserMailChanging(string value);
    partial void OnUserMailChanged();
    partial void OnUserPhotoChanging(string value);
    partial void OnUserPhotoChanged();
    partial void OnUserSubjectChanging(System.Nullable<int> value);
    partial void OnUserSubjectChanged();
    #endregion
		
		public Lecture()
		{
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBio", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string UserBio
		{
			get
			{
				return this._UserBio;
			}
			set
			{
				if ((this._UserBio != value))
				{
					this.OnUserBioChanging(value);
					this.SendPropertyChanging();
					this._UserBio = value;
					this.SendPropertyChanged("UserBio");
					this.OnUserBioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMail", DbType="VarChar(150)")]
		public string UserMail
		{
			get
			{
				return this._UserMail;
			}
			set
			{
				if ((this._UserMail != value))
				{
					this.OnUserMailChanging(value);
					this.SendPropertyChanging();
					this._UserMail = value;
					this.SendPropertyChanged("UserMail");
					this.OnUserMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhoto", DbType="VarChar(150)")]
		public string UserPhoto
		{
			get
			{
				return this._UserPhoto;
			}
			set
			{
				if ((this._UserPhoto != value))
				{
					this.OnUserPhotoChanging(value);
					this.SendPropertyChanging();
					this._UserPhoto = value;
					this.SendPropertyChanged("UserPhoto");
					this.OnUserPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSubject", DbType="Int")]
		public System.Nullable<int> UserSubject
		{
			get
			{
				return this._UserSubject;
			}
			set
			{
				if ((this._UserSubject != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserSubjectChanging(value);
					this.SendPropertyChanging();
					this._UserSubject = value;
					this.SendPropertyChanged("UserSubject");
					this.OnUserSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Lecture", Storage="_Subject", ThisKey="UserSubject", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Lectures.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Lectures.Add(this);
						this._UserSubject = value.ID;
					}
					else
					{
						this._UserSubject = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
